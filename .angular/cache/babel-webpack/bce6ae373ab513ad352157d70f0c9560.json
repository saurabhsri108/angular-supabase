{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { get, post, remove } from './fetch';\nimport fetch from 'cross-fetch';\nconst DEFAULT_SEARCH_OPTIONS = {\n  limit: 100,\n  offset: 0,\n  sortBy: {\n    column: 'name',\n    order: 'asc'\n  }\n};\nconst DEFAULT_FILE_OPTIONS = {\n  cacheControl: '3600',\n  contentType: 'text/plain;charset=UTF-8',\n  upsert: false\n};\nexport class StorageFileApi {\n  constructor(url, headers = {}, bucketId, fetch) {\n    this.url = url;\n    this.headers = headers;\n    this.bucketId = bucketId;\n    this.fetch = fetch;\n  }\n  /**\n   * Uploads a file to an existing bucket or replaces an existing file at the specified path with a new one.\n   *\n   * @param method HTTP method.\n   * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n   * @param fileBody The body of the file to be stored in the bucket.\n   * @param fileOptions HTTP headers.\n   * `cacheControl`: string, the `Cache-Control: max-age=<seconds>` seconds value.\n   * `contentType`: string, the `Content-Type` header value. Should be specified if using a `fileBody` that is neither `Blob` nor `File` nor `FormData`, otherwise will default to `text/plain;charset=UTF-8`.\n   * `upsert`: boolean, whether to perform an upsert.\n   */\n\n\n  uploadOrUpdate(method, path, fileBody, fileOptions) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        let body;\n        const options = Object.assign(Object.assign({}, DEFAULT_FILE_OPTIONS), fileOptions);\n        const headers = Object.assign(Object.assign({}, this.headers), method === 'POST' && {\n          'x-upsert': String(options.upsert)\n        });\n\n        if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\n          body = new FormData();\n          body.append('cacheControl', options.cacheControl);\n          body.append('', fileBody);\n        } else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\n          body = fileBody;\n          body.append('cacheControl', options.cacheControl);\n        } else {\n          body = fileBody;\n          headers['cache-control'] = `max-age=${options.cacheControl}`;\n          headers['content-type'] = options.contentType;\n        }\n\n        const _path = this._getFinalPath(path);\n\n        const res = yield fetch(`${this.url}/object/${_path}`, {\n          method,\n          body: body,\n          headers\n        });\n\n        if (res.ok) {\n          // const data = await res.json()\n          // temporary fix till backend is updated to the latest storage-api version\n          return {\n            data: {\n              Key: _path\n            },\n            error: null\n          };\n        } else {\n          const error = yield res.json();\n          return {\n            data: null,\n            error\n          };\n        }\n      } catch (error) {\n        return {\n          data: null,\n          error\n        };\n      }\n    });\n  }\n  /**\n   * Uploads a file to an existing bucket.\n   *\n   * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n   * @param fileBody The body of the file to be stored in the bucket.\n   * @param fileOptions HTTP headers.\n   * `cacheControl`: string, the `Cache-Control: max-age=<seconds>` seconds value.\n   * `contentType`: string, the `Content-Type` header value. Should be specified if using a `fileBody` that is neither `Blob` nor `File` nor `FormData`, otherwise will default to `text/plain;charset=UTF-8`.\n   * `upsert`: boolean, whether to perform an upsert.\n   */\n\n\n  upload(path, fileBody, fileOptions) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.uploadOrUpdate('POST', path, fileBody, fileOptions);\n    });\n  }\n  /**\n   * Replaces an existing file at the specified path with a new one.\n   *\n   * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n   * @param fileBody The body of the file to be stored in the bucket.\n   * @param fileOptions HTTP headers.\n   * `cacheControl`: string, the `Cache-Control: max-age=<seconds>` seconds value.\n   * `contentType`: string, the `Content-Type` header value. Should be specified if using a `fileBody` that is neither `Blob` nor `File` nor `FormData`, otherwise will default to `text/plain;charset=UTF-8`.\n   * `upsert`: boolean, whether to perform an upsert.\n   */\n\n\n  update(path, fileBody, fileOptions) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.uploadOrUpdate('PUT', path, fileBody, fileOptions);\n    });\n  }\n  /**\n   * Moves an existing file, optionally renaming it at the same time.\n   *\n   * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\n   * @param toPath The new file path, including the new file name. For example `folder/image-copy.png`.\n   */\n\n\n  move(fromPath, toPath) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield post(this.fetch, `${this.url}/object/move`, {\n          bucketId: this.bucketId,\n          sourceKey: fromPath,\n          destinationKey: toPath\n        }, {\n          headers: this.headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        return {\n          data: null,\n          error\n        };\n      }\n    });\n  }\n  /**\n   * Create signed url to download file without requiring permissions. This URL can be valid for a set number of seconds.\n   *\n   * @param path The file path to be downloaded, including the current file name. For example `folder/image.png`.\n   * @param expiresIn The number of seconds until the signed URL expires. For example, `60` for a URL which is valid for one minute.\n   */\n\n\n  createSignedUrl(path, expiresIn) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const _path = this._getFinalPath(path);\n\n        let data = yield post(this.fetch, `${this.url}/object/sign/${_path}`, {\n          expiresIn\n        }, {\n          headers: this.headers\n        });\n        const signedURL = `${this.url}${data.signedURL}`;\n        data = {\n          signedURL\n        };\n        return {\n          data,\n          error: null,\n          signedURL\n        };\n      } catch (error) {\n        return {\n          data: null,\n          error,\n          signedURL: null\n        };\n      }\n    });\n  }\n  /**\n   * Downloads a file.\n   *\n   * @param path The file path to be downloaded, including the path and file name. For example `folder/image.png`.\n   */\n\n\n  download(path) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const _path = this._getFinalPath(path);\n\n        const res = yield get(this.fetch, `${this.url}/object/${_path}`, {\n          headers: this.headers,\n          noResolveJson: true\n        });\n        const data = yield res.blob();\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        return {\n          data: null,\n          error\n        };\n      }\n    });\n  }\n  /**\n   * Retrieve URLs for assets in public buckets\n   *\n   * @param path The file path to be downloaded, including the path and file name. For example `folder/image.png`.\n   */\n\n\n  getPublicUrl(path) {\n    try {\n      const _path = this._getFinalPath(path);\n\n      const publicURL = `${this.url}/object/public/${_path}`;\n      const data = {\n        publicURL\n      };\n      return {\n        data,\n        error: null,\n        publicURL\n      };\n    } catch (error) {\n      return {\n        data: null,\n        error,\n        publicURL: null\n      };\n    }\n  }\n  /**\n   * Deletes files within the same bucket\n   *\n   * @param paths An array of files to be deletes, including the path and file name. For example [`folder/image.png`].\n   */\n\n\n  remove(paths) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield remove(this.fetch, `${this.url}/object/${this.bucketId}`, {\n          prefixes: paths\n        }, {\n          headers: this.headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        return {\n          data: null,\n          error\n        };\n      }\n    });\n  }\n  /**\n   * Get file metadata\n   * @param id the file id to retrieve metadata\n   */\n  // async getMetadata(id: string): Promise<{ data: Metadata | null; error: Error | null }> {\n  //   try {\n  //     const data = await get(`${this.url}/metadata/${id}`, { headers: this.headers })\n  //     return { data, error: null }\n  //   } catch (error) {\n  //     return { data: null, error }\n  //   }\n  // }\n\n  /**\n   * Update file metadata\n   * @param id the file id to update metadata\n   * @param meta the new file metadata\n   */\n  // async updateMetadata(\n  //   id: string,\n  //   meta: Metadata\n  // ): Promise<{ data: Metadata | null; error: Error | null }> {\n  //   try {\n  //     const data = await post(`${this.url}/metadata/${id}`, { ...meta }, { headers: this.headers })\n  //     return { data, error: null }\n  //   } catch (error) {\n  //     return { data: null, error }\n  //   }\n  // }\n\n  /**\n   * Lists all the files within a bucket.\n   * @param path The folder path.\n   * @param options Search options, including `limit`, `offset`, and `sortBy`.\n   * @param parameters Fetch parameters, currently only supports `signal`, which is an AbortController's signal\n   */\n\n\n  list(path, options, parameters) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const body = Object.assign(Object.assign(Object.assign({}, DEFAULT_SEARCH_OPTIONS), options), {\n          prefix: path || ''\n        });\n        const data = yield post(this.fetch, `${this.url}/object/list/${this.bucketId}`, body, {\n          headers: this.headers\n        }, parameters);\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        return {\n          data: null,\n          error\n        };\n      }\n    });\n  }\n\n  _getFinalPath(path) {\n    return `${this.bucketId}/${path}`;\n  }\n\n}","map":{"version":3,"sources":["/home/saurabhsrivastava/projects/angular-projects/angular-supabase/node_modules/@supabase/storage-js/dist/module/lib/StorageFileApi.js"],"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","get","post","remove","fetch","DEFAULT_SEARCH_OPTIONS","limit","offset","sortBy","column","order","DEFAULT_FILE_OPTIONS","cacheControl","contentType","upsert","StorageFileApi","constructor","url","headers","bucketId","uploadOrUpdate","method","path","fileBody","fileOptions","body","options","Object","assign","String","Blob","FormData","append","_path","_getFinalPath","res","ok","data","Key","error","json","upload","update","move","fromPath","toPath","sourceKey","destinationKey","createSignedUrl","expiresIn","signedURL","download","noResolveJson","blob","getPublicUrl","publicURL","paths","prefixes","list","parameters","prefix"],"mappings":"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","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { get, post, remove } from './fetch';\nimport fetch from 'cross-fetch';\nconst DEFAULT_SEARCH_OPTIONS = {\n    limit: 100,\n    offset: 0,\n    sortBy: {\n        column: 'name',\n        order: 'asc',\n    },\n};\nconst DEFAULT_FILE_OPTIONS = {\n    cacheControl: '3600',\n    contentType: 'text/plain;charset=UTF-8',\n    upsert: false,\n};\nexport class StorageFileApi {\n    constructor(url, headers = {}, bucketId, fetch) {\n        this.url = url;\n        this.headers = headers;\n        this.bucketId = bucketId;\n        this.fetch = fetch;\n    }\n    /**\n     * Uploads a file to an existing bucket or replaces an existing file at the specified path with a new one.\n     *\n     * @param method HTTP method.\n     * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n     * @param fileBody The body of the file to be stored in the bucket.\n     * @param fileOptions HTTP headers.\n     * `cacheControl`: string, the `Cache-Control: max-age=<seconds>` seconds value.\n     * `contentType`: string, the `Content-Type` header value. Should be specified if using a `fileBody` that is neither `Blob` nor `File` nor `FormData`, otherwise will default to `text/plain;charset=UTF-8`.\n     * `upsert`: boolean, whether to perform an upsert.\n     */\n    uploadOrUpdate(method, path, fileBody, fileOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                let body;\n                const options = Object.assign(Object.assign({}, DEFAULT_FILE_OPTIONS), fileOptions);\n                const headers = Object.assign(Object.assign({}, this.headers), (method === 'POST' && { 'x-upsert': String(options.upsert) }));\n                if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\n                    body = new FormData();\n                    body.append('cacheControl', options.cacheControl);\n                    body.append('', fileBody);\n                }\n                else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\n                    body = fileBody;\n                    body.append('cacheControl', options.cacheControl);\n                }\n                else {\n                    body = fileBody;\n                    headers['cache-control'] = `max-age=${options.cacheControl}`;\n                    headers['content-type'] = options.contentType;\n                }\n                const _path = this._getFinalPath(path);\n                const res = yield fetch(`${this.url}/object/${_path}`, {\n                    method,\n                    body: body,\n                    headers,\n                });\n                if (res.ok) {\n                    // const data = await res.json()\n                    // temporary fix till backend is updated to the latest storage-api version\n                    return { data: { Key: _path }, error: null };\n                }\n                else {\n                    const error = yield res.json();\n                    return { data: null, error };\n                }\n            }\n            catch (error) {\n                return { data: null, error };\n            }\n        });\n    }\n    /**\n     * Uploads a file to an existing bucket.\n     *\n     * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n     * @param fileBody The body of the file to be stored in the bucket.\n     * @param fileOptions HTTP headers.\n     * `cacheControl`: string, the `Cache-Control: max-age=<seconds>` seconds value.\n     * `contentType`: string, the `Content-Type` header value. Should be specified if using a `fileBody` that is neither `Blob` nor `File` nor `FormData`, otherwise will default to `text/plain;charset=UTF-8`.\n     * `upsert`: boolean, whether to perform an upsert.\n     */\n    upload(path, fileBody, fileOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.uploadOrUpdate('POST', path, fileBody, fileOptions);\n        });\n    }\n    /**\n     * Replaces an existing file at the specified path with a new one.\n     *\n     * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n     * @param fileBody The body of the file to be stored in the bucket.\n     * @param fileOptions HTTP headers.\n     * `cacheControl`: string, the `Cache-Control: max-age=<seconds>` seconds value.\n     * `contentType`: string, the `Content-Type` header value. Should be specified if using a `fileBody` that is neither `Blob` nor `File` nor `FormData`, otherwise will default to `text/plain;charset=UTF-8`.\n     * `upsert`: boolean, whether to perform an upsert.\n     */\n    update(path, fileBody, fileOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.uploadOrUpdate('PUT', path, fileBody, fileOptions);\n        });\n    }\n    /**\n     * Moves an existing file, optionally renaming it at the same time.\n     *\n     * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\n     * @param toPath The new file path, including the new file name. For example `folder/image-copy.png`.\n     */\n    move(fromPath, toPath) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield post(this.fetch, `${this.url}/object/move`, { bucketId: this.bucketId, sourceKey: fromPath, destinationKey: toPath }, { headers: this.headers });\n                return { data, error: null };\n            }\n            catch (error) {\n                return { data: null, error };\n            }\n        });\n    }\n    /**\n     * Create signed url to download file without requiring permissions. This URL can be valid for a set number of seconds.\n     *\n     * @param path The file path to be downloaded, including the current file name. For example `folder/image.png`.\n     * @param expiresIn The number of seconds until the signed URL expires. For example, `60` for a URL which is valid for one minute.\n     */\n    createSignedUrl(path, expiresIn) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const _path = this._getFinalPath(path);\n                let data = yield post(this.fetch, `${this.url}/object/sign/${_path}`, { expiresIn }, { headers: this.headers });\n                const signedURL = `${this.url}${data.signedURL}`;\n                data = { signedURL };\n                return { data, error: null, signedURL };\n            }\n            catch (error) {\n                return { data: null, error, signedURL: null };\n            }\n        });\n    }\n    /**\n     * Downloads a file.\n     *\n     * @param path The file path to be downloaded, including the path and file name. For example `folder/image.png`.\n     */\n    download(path) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const _path = this._getFinalPath(path);\n                const res = yield get(this.fetch, `${this.url}/object/${_path}`, {\n                    headers: this.headers,\n                    noResolveJson: true,\n                });\n                const data = yield res.blob();\n                return { data, error: null };\n            }\n            catch (error) {\n                return { data: null, error };\n            }\n        });\n    }\n    /**\n     * Retrieve URLs for assets in public buckets\n     *\n     * @param path The file path to be downloaded, including the path and file name. For example `folder/image.png`.\n     */\n    getPublicUrl(path) {\n        try {\n            const _path = this._getFinalPath(path);\n            const publicURL = `${this.url}/object/public/${_path}`;\n            const data = { publicURL };\n            return { data, error: null, publicURL };\n        }\n        catch (error) {\n            return { data: null, error, publicURL: null };\n        }\n    }\n    /**\n     * Deletes files within the same bucket\n     *\n     * @param paths An array of files to be deletes, including the path and file name. For example [`folder/image.png`].\n     */\n    remove(paths) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield remove(this.fetch, `${this.url}/object/${this.bucketId}`, { prefixes: paths }, { headers: this.headers });\n                return { data, error: null };\n            }\n            catch (error) {\n                return { data: null, error };\n            }\n        });\n    }\n    /**\n     * Get file metadata\n     * @param id the file id to retrieve metadata\n     */\n    // async getMetadata(id: string): Promise<{ data: Metadata | null; error: Error | null }> {\n    //   try {\n    //     const data = await get(`${this.url}/metadata/${id}`, { headers: this.headers })\n    //     return { data, error: null }\n    //   } catch (error) {\n    //     return { data: null, error }\n    //   }\n    // }\n    /**\n     * Update file metadata\n     * @param id the file id to update metadata\n     * @param meta the new file metadata\n     */\n    // async updateMetadata(\n    //   id: string,\n    //   meta: Metadata\n    // ): Promise<{ data: Metadata | null; error: Error | null }> {\n    //   try {\n    //     const data = await post(`${this.url}/metadata/${id}`, { ...meta }, { headers: this.headers })\n    //     return { data, error: null }\n    //   } catch (error) {\n    //     return { data: null, error }\n    //   }\n    // }\n    /**\n     * Lists all the files within a bucket.\n     * @param path The folder path.\n     * @param options Search options, including `limit`, `offset`, and `sortBy`.\n     * @param parameters Fetch parameters, currently only supports `signal`, which is an AbortController's signal\n     */\n    list(path, options, parameters) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const body = Object.assign(Object.assign(Object.assign({}, DEFAULT_SEARCH_OPTIONS), options), { prefix: path || '' });\n                const data = yield post(this.fetch, `${this.url}/object/list/${this.bucketId}`, body, { headers: this.headers }, parameters);\n                return { data, error: null };\n            }\n            catch (error) {\n                return { data: null, error };\n            }\n        });\n    }\n    _getFinalPath(path) {\n        return `${this.bucketId}/${path}`;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}